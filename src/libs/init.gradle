import org.gradle.api.tasks.diagnostics.internal.ProjectDetails
import org.gradle.api.tasks.diagnostics.internal.dependencies.AsciiDependencyReportRenderer

import java.nio.file.Files

rootProject {
    task 'projectlist' {
        doFirst {
            def output = file(getProperty("jp.unaguna.prjoutput"))
            allprojects {
                output.append "${project.path} ${projectDir.absolutePath}\n"
            }
        }
    }

    task 'tasklist' {
        doFirst {
            def output = file(getProperty("jp.unaguna.taskoutput"))
            allprojects {
                tasks.forEach { task ->
                    output.append "${task.path}\n"
                }
            }
        }
    }
}

allprojects {
    task 'eachDependencies' {
        doFirst {
            final outputBaseDir = file(getProperty("jp.unaguna.depsoutput"))
            final sortedConfigurations = new TreeSet<>(Comparator.comparing(Configuration::getName))
            sortedConfigurations.addAll(configurations)
            for (final configuration : sortedConfigurations) {
                final configurationOutputDir = file("${outputBaseDir}/${configuration.name}")
                if(!Files.isDirectory(configurationOutputDir.toPath())) {
                    Files.createDirectory(configurationOutputDir.toPath())
                }

                final projectStr = project == rootProject
                        ? 'root'
                        : project.path.replace(":", "__")

                final renderer = new AsciiDependencyReportRenderer()
                renderer.setOutputFile(file("${configurationOutputDir}/${projectStr}.txt"))
                renderer.startProject(ProjectDetails.of(project))
                renderer.startConfiguration(configuration)
                renderer.render(configuration)
                renderer.completeConfiguration(configuration)
                renderer.completeProject(ProjectDetails.of(project))
                renderer.complete()
            }
        }
    }
}
